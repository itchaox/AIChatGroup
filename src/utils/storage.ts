// Â≠òÂÇ®ÁÆ°ÁêÜÂ∑•ÂÖ∑
import { Group, Bookmark, AI_TOOLS } from '../types';

const STORAGE_KEYS = {
  GROUPS: 'ai_tool_groups',
  BOOKMARKS: 'ai_tool_bookmarks',
  CURRENT_TOOL: 'current_ai_tool',
  SETTINGS: 'app_settings'
};

// Ëé∑ÂèñÊâÄÊúâÂàÜÁªÑ
export const getGroups = (): Group[] => {
  try {
    const stored = localStorage.getItem(STORAGE_KEYS.GROUPS);
    return stored ? JSON.parse(stored) : [];
  } catch (error) {
    console.error('Ëé∑ÂèñÂàÜÁªÑÊï∞ÊçÆÂ§±Ë¥•:', error);
    return [];
  }
};

// ‰øùÂ≠òÂàÜÁªÑ
export const saveGroups = (groups: Group[]): void => {
  try {
    localStorage.setItem(STORAGE_KEYS.GROUPS, JSON.stringify(groups));
  } catch (error) {
    console.error('‰øùÂ≠òÂàÜÁªÑÊï∞ÊçÆÂ§±Ë¥•:', error);
  }
};

// Ëé∑ÂèñÊâÄÊúâÊî∂Ëóè
export const getBookmarks = (): Bookmark[] => {
  try {
    const stored = localStorage.getItem(STORAGE_KEYS.BOOKMARKS);
    return stored ? JSON.parse(stored) : [];
  } catch (error) {
    console.error('Ëé∑ÂèñÊî∂ËóèÊï∞ÊçÆÂ§±Ë¥•:', error);
    return [];
  }
};

// ‰øùÂ≠òÊî∂Ëóè
export const saveBookmarks = (bookmarks: Bookmark[]): void => {
  try {
    localStorage.setItem(STORAGE_KEYS.BOOKMARKS, JSON.stringify(bookmarks));
  } catch (error) {
    console.error('‰øùÂ≠òÊî∂ËóèÊï∞ÊçÆÂ§±Ë¥•:', error);
  }
};

// Ëé∑ÂèñÂΩìÂâçÈÄâ‰∏≠ÁöÑAIÂ∑•ÂÖ∑
export const getCurrentAITool = (): string => {
  try {
    return localStorage.getItem(STORAGE_KEYS.CURRENT_TOOL) || AI_TOOLS[0].id;
  } catch (error) {
    console.error('Ëé∑ÂèñÂΩìÂâçAIÂ∑•ÂÖ∑Â§±Ë¥•:', error);
    return AI_TOOLS[0].id;
  }
};

// ‰øùÂ≠òÂΩìÂâçÈÄâ‰∏≠ÁöÑAIÂ∑•ÂÖ∑
export const saveCurrentAITool = (toolId: string): void => {
  try {
    localStorage.setItem(STORAGE_KEYS.CURRENT_TOOL, toolId);
  } catch (error) {
    console.error('‰øùÂ≠òÂΩìÂâçAIÂ∑•ÂÖ∑Â§±Ë¥•:', error);
  }
};

// ÁîüÊàêÂîØ‰∏ÄID
export const generateId = (): string => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

// ÂàõÂª∫Êñ∞ÂàÜÁªÑ
export const createGroup = (name: string, aiToolId: string, icon: string = 'üìÅ'): Group => {
  const groups = getGroups();
  const maxOrder = groups.filter(g => g.aiToolId === aiToolId).reduce((max, g) => Math.max(max, g.order), 0);
  
  const newGroup: Group = {
    id: generateId(),
    name,
    icon,
    aiToolId,
    createdAt: Date.now(),
    updatedAt: Date.now(),
    order: maxOrder + 1
  };
  
  const updatedGroups = [...groups, newGroup];
  saveGroups(updatedGroups);
  return newGroup;
};

// Êõ¥Êñ∞ÂàÜÁªÑ
export const updateGroup = (groupId: string, updates: Partial<Group>): void => {
  const groups = getGroups();
  const updatedGroups = groups.map(group => 
    group.id === groupId 
      ? { ...group, ...updates, updatedAt: Date.now() }
      : group
  );
  saveGroups(updatedGroups);
};

// Âà†Èô§ÂàÜÁªÑ
export const deleteGroup = (groupId: string): void => {
  const groups = getGroups();
  const bookmarks = getBookmarks();
  
  // Âà†Èô§ÂàÜÁªÑ‰∏ãÁöÑÊâÄÊúâÊî∂Ëóè
  const updatedBookmarks = bookmarks.filter(bookmark => bookmark.groupId !== groupId);
  saveBookmarks(updatedBookmarks);
  
  // Âà†Èô§ÂàÜÁªÑ
  const updatedGroups = groups.filter(group => group.id !== groupId);
  saveGroups(updatedGroups);
};

// ÂàõÂª∫Êñ∞Êî∂Ëóè
export const createBookmark = (title: string, url: string, groupId: string, aiToolId: string, favicon?: string, description?: string): Bookmark => {
  const bookmarks = getBookmarks();
  const maxOrder = bookmarks.filter(b => b.groupId === groupId).reduce((max, b) => Math.max(max, b.order), 0);
  
  const newBookmark: Bookmark = {
    id: generateId(),
    title,
    url,
    favicon,
    groupId,
    aiToolId,
    description,
    createdAt: Date.now(),
    updatedAt: Date.now(),
    order: maxOrder + 1
  };
  
  const updatedBookmarks = [...bookmarks, newBookmark];
  saveBookmarks(updatedBookmarks);
  return newBookmark;
};

// Êõ¥Êñ∞Êî∂Ëóè
export const updateBookmark = (bookmarkId: string, updates: Partial<Bookmark>): void => {
  const bookmarks = getBookmarks();
  const updatedBookmarks = bookmarks.map(bookmark => 
    bookmark.id === bookmarkId 
      ? { ...bookmark, ...updates, updatedAt: Date.now() }
      : bookmark
  );
  saveBookmarks(updatedBookmarks);
};

// Âà†Èô§Êî∂Ëóè
export const deleteBookmark = (bookmarkId: string): void => {
  const bookmarks = getBookmarks();
  const updatedBookmarks = bookmarks.filter(bookmark => bookmark.id !== bookmarkId);
  saveBookmarks(updatedBookmarks);
};

// Ëé∑ÂèñÊåáÂÆöAIÂ∑•ÂÖ∑ÁöÑÂàÜÁªÑ
export const getGroupsByAITool = (aiToolId: string): Group[] => {
  const groups = getGroups();
  return groups.filter(group => group.aiToolId === aiToolId).sort((a, b) => a.order - b.order);
};

// Ëé∑ÂèñÊåáÂÆöÂàÜÁªÑÁöÑÊî∂Ëóè
export const getBookmarksByGroup = (groupId: string): Bookmark[] => {
  const bookmarks = getBookmarks();
  return bookmarks.filter(bookmark => bookmark.groupId === groupId).sort((a, b) => a.order - b.order);
};